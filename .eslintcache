[{"C:\\Users\\19135\\blizz-sre-test-app\\src\\index.js":"1","C:\\Users\\19135\\blizz-sre-test-app\\src\\App.js":"2","C:\\Users\\19135\\blizz-sre-test-app\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":6382,"mtime":1606943683462,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1mpualq",{"filePath":"11","messages":"12","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\19135\\blizz-sre-test-app\\src\\index.js",[],["17","18"],"C:\\Users\\19135\\blizz-sre-test-app\\src\\App.js",["19","20","21"],"import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { forwardRef } from 'react';\r\nimport _ from 'lodash';\r\nimport MaterialTable from \"material-table\";\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport axios from 'axios'\r\n\r\n\r\n//Material Table icon settings\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\n//base url for the axios get requests\r\nconst api = axios.create({\r\n    baseURL: `https://us.api.blizzard.com/hearthstone/`\r\n})\r\n\r\n//This is here in place of the secret store like Vault or something\r\nconst API_KEY = process.env.REACT_APP_API_KEY  \r\n\r\nfunction App() {\r\n\r\n    //running into a issue where its trying to call the names of the types/rarities/sets/classes\r\n    //before they're set. \r\n    // solved it by adding the check prior to the name so if it does fail, it doesn't mem leak. \r\n\r\n    var columns = [\r\n        //hidden ID collum to set the default sorting of the page\r\n        { title: \"ID\", field: \"id\", defaultSort: 'asc', hidden: true },\r\n        { title: \"Image\", field: \"image\", render: rowData => <img src={rowData.image} style={{ width: 100 }} />, sorting: false },\r\n        { title: \"Name\", field: \"name\" },\r\n        { title: \"Type\", field: \"cardTypeId\", render: rowData => types[rowData.cardTypeId]?.name },\r\n        { title: \"Rarity\", field: \"rarityId\", render: rowData => rarities[rowData.rarityId]?.name },\r\n        { title: \"Set\", field: \"cardSetId\", render: rowData => sets[rowData.cardSetId]?.name, sorting: false  },\r\n        { title: \"Class\", field: \"classId\", render: rowData => classes[rowData.classId]?.name }\r\n    ]\r\n\r\n    //Sets the table data from the api call. \r\n    const [data, setData] = useState([]); //table data\r\n\r\n    //This could have been stored here but I have it calling\r\n    //the api so that it would be more flexible\r\n    const [meta, setMeta] = useState({}); //meta data\r\n\r\n    //for error handling\r\n    const [iserror, setIserror] = useState(false);\r\n    const [errorMessages, setErrorMessages] = useState([]);\r\n\r\n    //Make the data easier to handle\r\n    //also you only have to iterate through it once\r\n    //then you can just call by the id\r\n    const types = _.keyBy(meta.types, 'id');\r\n    const rarities = _.keyBy(meta.rarities, 'id');\r\n    const sets = _.keyBy(meta.sets, 'id');\r\n    const classes = _.keyBy(meta.classes, 'id');\r\n\r\n\r\n    //useEffect to do the GET requests for the metadata. getting it each time so \r\n    //its more fleixble if this data is changing in the future. If its pretty static\r\n    //we could keep it in the app. Ideally we just have a database or something to\r\n    //get the data from so it can be more targeted.\r\n    //I did a single get on the metadata so that the number of requests are lower\r\n    //it ends up with extra data that might not be used but the request isn't too\r\n    //crazy and makes the app more flexible going forward so that other devs\r\n    //can request data without having to add extra api calls. \r\n    useEffect(() => {\r\n        api.get(\"metadata?locale=en_US&access_token=\" + API_KEY)\r\n            .then(res => {\r\n                setMeta(res.data)\r\n            })\r\n            .catch(error => {\r\n                setErrorMessages([\"Cannot load meta data\"])\r\n                setIserror(true)\r\n                console.log(errorMessages);\r\n            })\r\n        api.get(\"cards?locale=en_US&class=warlock%2Cdruid&manaCost=7&rarity=legendary&pageSize=10&access_token=\" + API_KEY)\r\n            .then(res => {\r\n                setData(res.data.cards)\r\n            })\r\n            .catch(error => {\r\n                setErrorMessages([\"Cannot load card data\"])\r\n                setIserror(true)\r\n                console.log(errorMessages);\r\n            })\r\n    }, [])\r\n\r\n    //Returns a material-table element. Its pretty quick and easy\r\n    //but not as flexible, but since this is just a quick demo app,\r\n    //it will do for now\r\n    return (<MaterialTable\r\n        title=\"Legendary 7 Mana Druid and Warlock Cards Of Awesomeness\"\r\n        columns={columns}\r\n        data={data}\r\n        icons={tableIcons}\r\n        localization={{\r\n            toolbar: {\r\n                searchPlaceholder: 'Search A Card Name'\r\n            }\r\n        }}\r\n        options={{\r\n            sorting: true,\r\n            pageSize: 10\r\n\r\n        }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\19135\\blizz-sre-test-app\\src\\reportWebVitals.js",[],["22","23"],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":62,"column":62,"nodeType":"30","endLine":62,"endColumn":112},{"ruleId":"31","severity":1,"message":"32","line":78,"column":12,"nodeType":"33","messageId":"34","endLine":78,"endColumn":19},{"ruleId":"35","severity":1,"message":"36","line":117,"column":8,"nodeType":"37","endLine":117,"endColumn":10,"suggestions":"38"},{"ruleId":"24","replacedBy":"39"},{"ruleId":"26","replacedBy":"40"},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'iserror' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'errorMessages'. Either include it or remove the dependency array.","ArrayExpression",["43"],["41"],["42"],"no-global-assign","no-unsafe-negation",{"desc":"44","fix":"45"},"Update the dependencies array to be: [errorMessages]",{"range":"46","text":"47"},[5775,5777],"[errorMessages]"]